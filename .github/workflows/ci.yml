name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.prettierrc'
      - '**/*ignore'
  push:
    branches:
      - master
      - next
      - rc
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.prettierrc'
      - '**/*ignore'

jobs:
  test:
    name: Unit + Type Check / Node.js ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - run: npm clean-install

      - name: Type Check
        run: npm run test:types

      - name: Run Unit Tests + Coverage
        run: npm run test:coverage

      - name: Upload coverage results to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./test/coverage/lcov.info

  deno-tests:
    name: Deno Tests / ${{ matrix.deno }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno: ['1.x', '2.x']
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno }}
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Run Deno Tests
        run: |
          npm clean-install
          npm run build
          cd test/deno
          npm install
          npm test || npm test

      - name: Run integration and browser tests on Deno 2.x only
        if: ${{ matrix.deno == '2.x' }}
        run: |
          npm run test:integration:browser

      - name: Stop Supabase
        run: supabase stop

  node-integration:
    name: Node Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Run integration tests
        run: |
          # Remove pnpm-lock.yaml to ensure npm uses only package-lock.json
          rm -f pnpm-lock.yaml
          # Force update package-lock.json to match package.json
          npm install --package-lock-only
          # Clean cache to ensure we use current package-lock.json
          npm cache clean --force
          rm -rf node_modules
          npm clean-install
          echo "=== Checking installed realtime-js package.json ==="
          cat node_modules/@supabase/realtime-js/package.json | grep -A 5 -B 5 version
          echo "=== Checking all @supabase packages in node_modules ==="
          find node_modules/@supabase -name "package.json" -exec grep -l "realtime-js" {} \;
          echo "=== Checking npm ls output ==="
          npm ls @supabase/realtime-js --depth=10
          echo "=== Checking npm audit ==="
          npm audit --audit-level=low
          echo "=== Checking npm outdated ==="
          npm outdated @supabase/realtime-js
          echo "=== Checking npm why realtime-js ==="
          npm why @supabase/realtime-js
          npm run build
          npm run test:integration || npm run test:integration

      - name: Stop Supabase
        run: supabase stop

  next-integration:
    name: Next.js Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Install Playwright browsers and dependencies
        run: npx playwright install --with-deps

      - name: Run integration tests
        run: |
          npm clean-install
          npm run build
          PKG=$(npm pack)
          echo "Packed: $PKG"
          cd test/integration/next
          npm install "../../../$PKG"
          npm install
          npx playwright install
          npm run test

      - name: Stop Supabase
        run: supabase stop

  expo-tests:
    name: Expo Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: |
          supabase start

      - name: Build and test expo
        run: |
          npm clean-install
          npm run build
          PKG=$(npm pack)
          echo "Packed: $PKG"
          cd test/integration/expo
          npm install "../../../$PKG"
          npm install
          npm test || npm test

      - name: Stop Supabase
        run: supabase stop

  websocket-browser-tests:
    name: WebSocket Browser Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install Playwright browsers and dependencies
        run: npx playwright install --with-deps

      - name: Start Supabase
        run: supabase start

      - name: Run WebSocket tests
        run: |
          echo "=== Git branch and status ==="
          git branch -a
          git status
          echo "=== Current directory contents ==="
          ls -la
          echo "=== Initial package.json realtime-js version ==="
          grep -A 2 -B 2 "realtime-js" package.json
          echo "=== Initial package-lock.json realtime-js version ==="
          grep -A 2 -B 2 "realtime-js" package-lock.json
          # Remove pnpm-lock.yaml to ensure npm uses only package-lock.json
          rm -f pnpm-lock.yaml
          # Force use version from branch (not merge commit)
          git checkout HEAD -- package.json package-lock.json
          echo "=== After git checkout HEAD ==="
          grep -A 2 -B 2 "realtime-js" package.json
          grep -A 2 -B 2 "realtime-js" package-lock.json
          echo "=== Checking if other @supabase packages require realtime-js ==="
          npm view @supabase/auth-js@2.70.0 dependencies
          npm view @supabase/auth-js@2.70.0 peerDependencies
          npm view @supabase/functions-js@2.4.4 dependencies
          npm view @supabase/functions-js@2.4.4 peerDependencies
          npm view @supabase/postgrest-js@1.19.4 dependencies
          npm view @supabase/postgrest-js@1.19.4 peerDependencies
          npm view @supabase/storage-js@2.7.1 dependencies
          npm view @supabase/storage-js@2.7.1 peerDependencies
          echo "=== Checking available realtime-js versions ==="
          npm view @supabase/realtime-js versions --json | tail -10
          echo "=== Checking realtime-js latest version ==="
          npm view @supabase/realtime-js version
          echo "=== Checking npm resolution with --dry-run ==="
          npm install --dry-run | grep realtime-js
          echo "=== Running npm install --package-lock-only with maximum verbosity ==="
          npm install --package-lock-only --loglevel=verbose
          echo "=== Checking npm cache info ==="
          npm cache verify
          echo "=== Checking npm config ==="
          npm config list
          echo "=== Checking npm registry info ==="
          npm config get registry
          # Clean cache to ensure we use current package-lock.json
          npm cache clean --force
          rm -rf node_modules
          npm clean-install
          echo "=== Checking installed realtime-js package.json ==="
          cat node_modules/@supabase/realtime-js/package.json | grep -A 5 -B 5 version
          echo "=== Checking all @supabase packages in node_modules ==="
          find node_modules/@supabase -name "package.json" -exec grep -l "realtime-js" {} \;
          echo "=== Checking npm ls output ==="
          npm ls @supabase/realtime-js --depth=10
          echo "=== Checking npm audit ==="
          npm audit --audit-level=low
          echo "=== Checking npm outdated ==="
          npm outdated @supabase/realtime-js
          echo "=== Checking npm why realtime-js ==="
          npm why @supabase/realtime-js
          echo "=== Running WebSocket tests ==="
          cd test/integration/websocket
          npm install
          cp ../../../dist/umd/supabase.js .
          npm run test

      - name: Stop Supabase
        run: supabase stop
