name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.prettierrc'
      - '**/*ignore'
  push:
    branches:
      - master
      - next
      - rc
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.prettierrc'
      - '**/*ignore'

jobs:
  test:
    name: Unit + Type Check / Node.js ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['20']

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - run: npm clean-install

      - name: Type Check
        run: npm run test:types

      - name: Run Unit Tests + Coverage
        run: npm run test:coverage

      - name: Upload coverage results to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./test/coverage/lcov.info

  deno-tests:
    name: Deno Tests / ${{ matrix.deno }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno: ['1.x', '2.x']
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno }}
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Run Deno Tests
        run: |
          npm clean-install
          npm run build
          cd test/deno
          npm install
          npm test || npm test

      - name: Run integration and browser tests on Deno 2.x only
        if: ${{ matrix.deno == '2.x' }}
        run: |
          npm run test:integration || npm run test:integration
          npm run test:integration:browser

      - name: Stop Supabase
        run: supabase stop

  node-integration:
    name: Node Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Run integration tests
        run: |
          npm clean-install
          npm run build
          npm run test:integration || npm run test:integration

      - name: Stop Supabase
        run: supabase stop

  expo-tests:
    name: Expo Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: |
          supabase start

      - name: Debug Supabase connectivity
        run: |
          echo "Checking HTTP endpoint with curl"
          curl -v http://127.0.0.1:54321 || echo "curl failed"

          echo "Testing WebSocket connection to supabase realtime with auth"
          # Test WebSocket connection with proper authentication parameters
          curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==" "http://127.0.0.1:54321/realtime/v1/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0&vsn=1.0.0" || echo "WS connection failed"

          echo "Testing direct WebSocket connection to realtime service (bypassing Kong)"
          # Test direct connection to realtime service on port 4000
          curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==" "http://127.0.0.1:4000/socket/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0&vsn=1.0.0" || echo "Direct WS connection failed"

          echo "Testing realtime endpoint directly"
          curl -v http://127.0.0.1:54321/realtime/v1/ || echo "Realtime endpoint failed"

          echo "Testing realtime health check"
          curl -v http://127.0.0.1:54321/realtime/v1/api/ping || echo "Realtime ping failed"

          echo "Testing realtime health check with auth"
          curl -v -H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" http://127.0.0.1:54321/realtime/v1/api/ping || echo "Realtime ping with auth failed"

          echo "Testing realtime subscription endpoint"
          curl -v -X POST -H "Content-Type: application/json" -H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" -d '{"channel":"test-channel","type":"broadcast"}' http://127.0.0.1:54321/realtime/v1/api/broadcast || echo "Realtime broadcast failed"

          echo "Testing direct realtime service endpoints"
          curl -v http://127.0.0.1:4000/api/ping || echo "Direct realtime ping failed"
          curl -v -H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" http://127.0.0.1:4000/api/ping || echo "Direct realtime ping with auth failed"

          echo "Testing WebSocket connection with Node.js"
          npm install ws || echo "Failed to install ws package"
          node -e "
          const WebSocket = require('ws');
          const ws = new WebSocket('ws://127.0.0.1:54321/realtime/v1/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0&vsn=1.0.0');

          ws.on('open', () => {
            console.log('WebSocket connection opened');
            // Send a phx_join message
            const joinMessage = JSON.stringify({
              topic: 'realtime:test-channel',
              event: 'phx_join',
              payload: { config: { broadcast: { self: false }, presence: { key: '' }, private: false } },
              ref: '1'
            });
            console.log('Sending join message:', joinMessage);
            ws.send(joinMessage);
          });

          ws.on('message', (data) => {
            console.log('Received message:', data.toString());
          });

          ws.on('error', (error) => {
            console.log('WebSocket error:', error.message);
          });

          ws.on('close', (code, reason) => {
            console.log('WebSocket closed:', code, reason.toString());
          });

          setTimeout(() => {
            console.log('Closing WebSocket connection');
            ws.close();
          }, 5000);
          " || echo "Node.js WebSocket test failed"

          docker ps --format '{{.Names}}'

          echo "docker logs"
          for name in $(docker ps --format '{{.Names}}'); do
            echo "Logs for $name:"
            docker logs --tail 20 $name || echo "No logs for $name"
          done

          echo "Checking realtime container specifically"
          docker logs supabase_realtime_supabase-js --tail 50 || echo "No realtime logs"

          echo "Checking Kong logs for WebSocket requests"
          docker logs supabase_kong_supabase-js --tail 20 || echo "No Kong logs"

          echo "Checking if realtime service is properly configured"
          docker exec supabase_realtime_supabase-js env | grep -E "(REALTIME|POSTGRES|JWT)" || echo "No realtime env vars found"

      - name: Build and test expo
        env:
          SUPABASE_URL: http://127.0.0.1:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
        run: |
          echo "Waiting for Supabase services to be fully ready"
          sleep 10

          npm clean-install
          npm run build
          PKG=$(npm pack)
          echo "Packed: $PKG"
          cd examples/expo-app
          npm install "../../$PKG"
          npm install
          npm test || npm test

      - name: Stop Supabase
        run: supabase stop
